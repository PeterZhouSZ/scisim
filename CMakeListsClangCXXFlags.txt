# Note: Clang makes one remove unwanted flags
if( STRICT_BUILD )
  # Enable as many warnings as possible
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic" )
  
  # Remove warnings that cause issues with SCISim
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-parameter -Wno-padded -Wno-float-equal -Wno-global-constructors -Wno-exit-time-destructors" )

  # Remove warnigns that cause issues with the Qt4 front-ends
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-over-aligned" )

  # Warnings that cause issues with the FrictionProblem file from So-bogus
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-documentation-unknown-command -Wno-old-style-cast -Wno-conversion -Wno-weak-vtables -Wno-undefined-func-template" )
endif()

# Disable run time type information
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti" )

# Compiles with static analysis support
#set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --analyze" )

# Enable extra optimizations
set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -march=native" )
# lto causes spurious warnings with the address sanitizer on Apple LLVM version 7.0.2
if( SANITIZER STREQUAL "none" )
  set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -flto" )
endif()

# Flags for code coverage tests
set( CMAKE_CXX_FLAGS_COVERAGE "-O0 -g --coverage" CACHE STRING "Flags used by the compiler during coverage builds." FORCE )
mark_as_advanced( CMAKE_CXX_FLAGS_COVERAGE )

# Enable sanitizers, if requested
if( SANITIZER STREQUAL "address" )
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address" )
elseif( NOT SANITIZER STREQUAL "none" )
  message( FATAL_ERROR "Error, only 'address' is supported for Clang sanitizers, in the build system." )
endif()
